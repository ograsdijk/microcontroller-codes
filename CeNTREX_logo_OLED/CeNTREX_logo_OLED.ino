#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

const unsigned char CeNTREX_logo [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x1f, 0xff, 0xc0, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xc0, 0xff, 0xff, 0xe0, 
  0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x1e, 
  0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x38, 0x00, 0x00, 0x3f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0xf0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf0, 0x00, 0x01, 0xe0, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xf0, 0x00, 0x03, 0xc0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf0, 0x00, 0x03, 
  0xc0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x20, 0x00, 0x07, 0x80, 0x01, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x07, 0x80, 0x07, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x0f, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfe, 0x00, 0x00, 0x0f, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 
  0x0f, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x3f, 0x80, 0x00, 0x0f, 0xc3, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xcf, 0xfe, 0x00, 0x07, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xcf, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xfc, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xf8, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x78, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0xff, 0xfc, 0x1f, 0xff, 0xff, 0xf0, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x01, 
  0xff, 0xff, 0x80, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0x3f, 0xfe, 0x00, 
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x08, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x7f, 0xf0, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf0, 
  0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x0f, 0xe4, 0x00, 0x07, 0xe1, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xfb, 0xf3, 0xf0, 0x3f, 0xfc, 0x00, 
  0x07, 0xe1, 0xff, 0xff, 0xdf, 0xf8, 0x7f, 0xfb, 0xf3, 0xe0, 0x78, 0x1c, 0x00, 0x01, 0xf0, 0x66, 
  0x38, 0xcc, 0x0c, 0x30, 0x18, 0x61, 0x80, 0x70, 0x0c, 0x00, 0x01, 0xb0, 0x66, 0x38, 0xcc, 0x0c, 
  0x30, 0x18, 0x63, 0x00, 0x60, 0x04, 0x07, 0x01, 0x98, 0x66, 0x38, 0xcc, 0x0c, 0x30, 0x00, 0x33, 
  0x00, 0xe0, 0x00, 0x1f, 0xc1, 0x98, 0x62, 0x38, 0x8c, 0x1c, 0x30, 0x00, 0x1e, 0x00, 0xc0, 0x00, 
  0x30, 0x61, 0x8c, 0x60, 0x38, 0x0f, 0xf8, 0x3f, 0xc0, 0x1c, 0x00, 0xc0, 0x00, 0x70, 0x21, 0x8c, 
  0x60, 0x38, 0x0f, 0xe0, 0x3f, 0xc0, 0x0c, 0x00, 0xc0, 0x00, 0x60, 0x31, 0x86, 0x60, 0x38, 0x0c, 
  0x60, 0x30, 0x00, 0x1e, 0x00, 0xe0, 0x04, 0x7f, 0xf1, 0x86, 0x60, 0x38, 0x0c, 0x30, 0x30, 0x00, 
  0x36, 0x00, 0x60, 0x0e, 0x60, 0x01, 0x83, 0x60, 0x38, 0x0c, 0x30, 0x30, 0x10, 0x33, 0x00, 0x70, 
  0x0c, 0x70, 0x01, 0x83, 0xe0, 0x38, 0x0c, 0x18, 0x30, 0x18, 0x61, 0x80, 0x38, 0x1c, 0x30, 0x21, 
  0x81, 0xe0, 0x38, 0x0c, 0x18, 0x30, 0x18, 0xc1, 0xc0, 0x3f, 0xf8, 0x38, 0xe7, 0xe1, 0xe0, 0x7c, 
  0x3f, 0x8f, 0xff, 0xfb, 0xf3, 0xf0, 0x0f, 0xe0, 0x1f, 0xc7, 0xe0, 0xe0, 0xfe, 0x3f, 0x8f, 0xff, 
  0xfb, 0xf3, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char laser [] PROGMEM = {
 0x00, 0x18, 0x00, 0x00, 0x00, 0x02, 0x18, 0x00, 0x00, 0x00, 0x07, 0x18, 0xe0, 0x00, 0x00, 0x03, 
  0x98, 0xc0, 0x00, 0x00, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x73, 0xff, 0x84, 0x00, 0x00, 0x7b, 0xff, 
  0xdc, 0x00, 0x00, 0x1f, 0xff, 0xfc, 0x00, 0x00, 0x0f, 0xff, 0xf0, 0x00, 0x00, 0x0f, 0xff, 0xf0, 
  0x00, 0x00, 0x0f, 0xff, 0xf0, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 
  0xff, 0x0f, 0xff, 0xf0, 0x00, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x00, 0x1f, 0xff, 0xf8, 0x00, 0x00, 
  0x7b, 0xff, 0xfc, 0x00, 0x00, 0x73, 0xff, 0x8c, 0x00, 0x00, 0x03, 0xff, 0x80, 0x00, 0x00, 0x03, 
  0x19, 0xc0, 0x00, 0x00, 0x07, 0x18, 0xc0, 0x00, 0x00, 0x02, 0x18, 0xc0, 0x00, 0x00
};

const unsigned char ramp [] PROGMEM = {
  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 
  0x00, 0x77, 0x00, 0x00, 0x00, 0x00, 0xe3, 0x80, 0x00, 0x00, 0x01, 0xc1, 0xc0, 0x00, 0x00, 0x03, 
  0x80, 0xe0, 0x00, 0x00, 0x07, 0x00, 0x70, 0x00, 0x00, 0x0e, 0x00, 0x38, 0x00, 0x00, 0x1c, 0x00, 
  0x1c, 0x00, 0x00, 0x38, 0x00, 0x0e, 0x00, 0x00, 0x70, 0x00, 0x0e, 0x00, 0x00, 0xe0, 0x00, 0x07, 
  0x00, 0x00, 0xe0, 0x00, 0x03, 0x80, 0x01, 0xc0, 0x00, 0x01, 0xc0, 0x03, 0x80, 0x00, 0x00, 0xe0, 
  0x07, 0x00, 0x00, 0x00, 0x70, 0x0e, 0x00, 0x00, 0x00, 0x38, 0x1c, 0x00, 0x00, 0x00, 0x1c, 0x38, 
  0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x03
};

const unsigned char unlocked [] PROGMEM = {
  0x00, 0x18, 0x00, 0x00, 0x00, 0x02, 0x18, 0x00, 0x1f, 0x80, 0x07, 0x18, 0xe0, 0x3f, 0xc0, 0x03, 
  0x98, 0xc0, 0x3f, 0xe0, 0x01, 0xff, 0xc0, 0x21, 0xf0, 0x73, 0xff, 0x84, 0x00, 0xf0, 0x7b, 0xff, 
  0xdc, 0x00, 0xf0, 0x1f, 0xff, 0xfc, 0x00, 0x70, 0x0f, 0xff, 0xf0, 0x00, 0xf0, 0x0f, 0xff, 0xf0, 
  0x00, 0xf0, 0x0f, 0xff, 0xf0, 0x01, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 
  0xff, 0x0f, 0xff, 0xf0, 0x0f, 0x00, 0x0f, 0xff, 0xe0, 0x0f, 0x00, 0x1f, 0xff, 0xf8, 0x06, 0x00, 
  0x7b, 0xff, 0xfc, 0x00, 0x00, 0x73, 0xff, 0x8c, 0x07, 0x00, 0x03, 0xff, 0x80, 0x0f, 0x00, 0x03, 
  0x19, 0xc0, 0x0f, 0x00, 0x07, 0x18, 0xc0, 0x06, 0x00, 0x02, 0x18, 0xc0, 0x00, 0x00
};

const unsigned char lock_off [] PROGMEM = {
  0x06, 0x00, 0x00, 0xc0, 0x0f, 0x00, 0x01, 0xe0, 0x1f, 0x80, 0x03, 0xf0, 0x3f, 0xc0, 0x07, 0xf8, 
  0x7f, 0xe0, 0x0f, 0xfc, 0xff, 0xf0, 0x1f, 0xfc, 0xff, 0xf8, 0x3f, 0xfc, 0x7f, 0xfc, 0x7f, 0xfc, 
  0x3f, 0xfe, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xc0, 
  0x03, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xfc, 0x00, 
  0x00, 0xff, 0xfe, 0x00, 0x01, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 0xc0, 
  0x0f, 0xff, 0xff, 0xe0, 0x1f, 0xff, 0xff, 0xf0, 0x3f, 0xfe, 0xff, 0xf8, 0x7f, 0xfc, 0x7f, 0xfc, 
  0xff, 0xf8, 0x3f, 0xfc, 0xff, 0xf0, 0x1f, 0xfc, 0x7f, 0xe0, 0x0f, 0xfc, 0x3f, 0xc0, 0x07, 0xf8, 
  0x1f, 0x80, 0x03, 0xf0, 0x0f, 0x00, 0x01, 0xe0
};

// https://diyusthad.com/image2cpp for the image conversion

void setup() {
  Serial.begin(9600);

  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3D for 128x64
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }

  // Show initial display buffer contents on the screen --
  // the library initializes this with an Adafruit splash screen.
  display.clearDisplay(); //for Clearing the display
  display.drawBitmap(64-50,0, CeNTREX_logo, 100, 64, SSD1306_WHITE); // display.drawBitmap(x position, y position, bitmap data, bitmap width, bitmap height, color)
  display.display();
  
  delay(2000);
}

void loop() {
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0,0);
  display.println("Laser Lock");
  display.setCursor(0,25);
  display.println("State:");
  display.setCursor(0,50);
  display.println("Locked");
  display.drawBitmap(128-40,64-22, laser, 40, 22, SSD1306_WHITE);
  display.display();
  
  delay(4000);
  
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0,0);
  display.println("Laser Lock");
  display.setCursor(0,25);
  display.println("State:");
  display.setCursor(0,50);
  display.println("Scan");
  display.drawBitmap(128-40,64-22, ramp, 40, 22, SSD1306_WHITE);
  display.display();

  delay(4000);

  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0,0);
  display.println("Laser Lock");
  display.setCursor(0,25);
  display.println("State:");
  display.setCursor(0,50);
  display.println("Locking");
  display.drawBitmap(128-40,64-22, unlocked, 40, 22, SSD1306_WHITE);
  display.display();

  delay(4000);

  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0,0);
  display.println("Laser Lock");
  display.setCursor(0,25);
  display.println("State:");
  display.setCursor(0,50);
  display.println("Off");
  display.drawBitmap(128-30,64-30, lock_off, 30, 30, SSD1306_WHITE);
  display.display();

  delay(4000);

}
